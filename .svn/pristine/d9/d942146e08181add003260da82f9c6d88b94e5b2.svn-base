//
//  RMBOViewController.m
//  RomiboClient
//
//  Created by Doug Suriano on 12/1/13.
//  Copyright (c) 2013 com.romibo. All rights reserved.
//

#import "RMBOViewController.h"
#import <Foundation/Foundation.h>
#import "RMBOAppDelegate.h"

@interface RMBOViewController ()
/*{
    NSTimer *checkRomoConnectionTimer;
}*/

@property (nonatomic, strong) AVCaptureVideoDataOutput *videoOutput;
@property (nonatomic) dispatch_queue_t videoOutputQueue;
@property (nonatomic, strong) AVCaptureVideoPreviewLayer *previewLayer;
@property (nonatomic, strong) CIDetector *faceDetector;
@property (nonatomic, strong) UIView *faceFoundView;

- (void)updateEyesUsingFeatures:(NSArray *)features;

@end

@implementation RMBOViewController

#define kRMBOLandscapeLeftEXIFOrientationValue @1
#define kRMBOVideoCaptureWidth 640
#define kRMBOAnimationLength 0.4
#define kRMBOEyeWidth 101
#define kRMBOLeftEyeStationaryPosition 167
#define kRMBORightEyeStationaryPosition 324
#define kRMBOLeftEyeRightBarrier 253
#define kRMBORightEyeRightBarrier 410


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
//    checkRomoConnectionTimer = [NSTimer scheduledTimerWithTimeInterval:5.0f target:self selector:@selector(timerExpired_RomoConnection:) userInfo:nil repeats:YES];
}

- (void)viewWillAppear:(BOOL)animated
{
    [self setupEyeTracking];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [self tearDownEyeTracking];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)setupEyeTracking
{
    NSDictionary *faceDetectorOptions = @{CIDetectorAccuracy : CIDetectorAccuracyHigh
                                          };
    
    _faceDetector = [CIDetector detectorOfType:CIDetectorTypeFace context:nil options:faceDetectorOptions];
    
    NSError *error = nil;
    
    AVCaptureSession *session = [[AVCaptureSession alloc] init];
    [session setSessionPreset:AVCaptureSessionPreset640x480];
    
    AVCaptureDevice *device;
    
    AVCaptureDevicePosition desired = AVCaptureDevicePositionFront;
    
    for (AVCaptureDevice *d in [AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo]) {
        if ([d position] == desired) {
            device = d;
            break;
        }
    }
    
    AVCaptureDeviceInput *deviceInput = [AVCaptureDeviceInput deviceInputWithDevice:device error:&error];
    
    if (!error) {
        if ([session canAddInput:deviceInput]) {
            [session addInput:deviceInput];
        }
    }
    else {
        NSLog(@"%@", [error localizedDescription]);
    }
    
    _videoOutput = [[AVCaptureVideoDataOutput alloc] init];
    
    NSDictionary *videoSettings = @{(id)kCVPixelBufferPixelFormatTypeKey : [NSNumber numberWithInt:kCMPixelFormat_32BGRA]};
    [_videoOutput setVideoSettings:videoSettings];
    [_videoOutput setAlwaysDiscardsLateVideoFrames:YES];
    
    _videoOutputQueue = dispatch_queue_create("VideoDataQueue", DISPATCH_QUEUE_SERIAL);
    [_videoOutput setSampleBufferDelegate:self queue:_videoOutputQueue];
    
    if ([session canAddOutput:_videoOutput]) {
        [session addOutput:_videoOutput];
    }
    
    [[_videoOutput connectionWithMediaType:AVMediaTypeVideo] setEnabled:YES];
    
    _previewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:session];
    
    [[_previewLayer connection] setVideoOrientation:AVCaptureVideoOrientationLandscapeLeft];
    
    CALayer *rootLayer = [_previewView layer];
    [rootLayer setMasksToBounds:YES];
    [_previewLayer setFrame:[rootLayer bounds]];
    [rootLayer addSublayer:_previewLayer];
    
    //[_previewView setHidden:YES];
    
    [session startRunning];
    
}

- (void)tearDownEyeTracking
{
    _videoOutput = nil;
    [_previewLayer removeFromSuperlayer];
    _previewLayer = nil;
}

- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection
{
    CVPixelBufferRef pixelBuffer = CMSampleBufferGetImageBuffer(sampleBuffer);
    CFDictionaryRef attachments = CMCopyDictionaryOfAttachments(kCFAllocatorDefault, sampleBuffer, kCMAttachmentMode_ShouldPropagate);
    CIImage *ciImage = [[CIImage alloc] initWithCVPixelBuffer:pixelBuffer options:(__bridge NSDictionary *)attachments];
    
    if (attachments) {
        CFRelease(attachments);
    }
    
    static NSDictionary *_faceDetectionOptions = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _faceDetectionOptions = @{CIDetectorImageOrientation : [NSNumber numberWithInt:1],
                                  CIDetectorSmile : @YES};
    });
    
    NSArray *features = [_faceDetector featuresInImage:ciImage options:_faceDetectionOptions];
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [self updateEyesUsingFeatures:features];
    });
}

- (void)updateEyesUsingFeatures:(NSArray *)features
{
    //TODO: Update Code with new face tracking code
}

#pragma mark Robot Commuincation

- (void)speakUtterance:(NSString *)phrase atSpeechRate:(float)speechRate withVoice:(AVSpeechSynthesisVoice *)voice
{
    if (!speechRate) {
        speechRate = AVSpeechUtteranceDefaultSpeechRate;
    }
    
    if (!voice) {
        voice = [AVSpeechSynthesisVoice voiceWithLanguage:[AVSpeechSynthesisVoice currentLanguageCode]];
    }
    
    if (!_speechSynth) {
        _speechSynth = [[AVSpeechSynthesizer alloc] init];
    }
    
    AVSpeechUtterance *utterance = [AVSpeechUtterance speechUtteranceWithString:phrase];
    [utterance setRate:speechRate];
    [utterance setVoice:[AVSpeechSynthesisVoice voiceWithLanguage:[AVSpeechSynthesisVoice currentLanguageCode]]];
    [_speechSynth speakUtterance:utterance];
}


- (void)stopRobotMovement
{
    
}


- (void)moveRobotAtSpeedrate:(float)rate inDirection:(float)direction
{
    
}

- (void)tiltRobotHeadAtAngle:(float)angle
{
    
}
/*
- (void) timerExpired_RomoConnection:(NSTimer*)theTimer
{
    RMBOAppDelegate* appDelegate = (RMBOAppDelegate*) [UIApplication sharedApplication].delegate;
    
    static int attempts = 0;
    NSString* romoConnectionStatus = @"Not connected to Romo";
    
    if (appDelegate.romoDelegate.isConnectToRomo == true)
    {
        romoConnectionStatus = @"Connected to Romo";
        //[theTimer invalidate];
    }
    
    attempts++;
    NSString *newText = [NSString stringWithFormat:@"%@(%d)", romoConnectionStatus, attempts];
    _robotConnectionStatus.text = newText;
}
*/
@end